# SUPER PROMPT — 3D TRENCH INTRO (NO LANDING)

**Role:** You are a senior WebGL/Three.js engineer. Build a lightweight, production-ready, mobile-aware **interactive intro**: a third-person character runs through a trench under fire until reaching a **luminescent interdimensional portal**. When the player reaches the portal, perform a **white-flash finish** and then **dispatch a custom event** `intro:complete` and call `window.onIntroComplete?.()`. Do not load or show any landing page; just end the intro cleanly.

## 0) Repo + File Layout (static, no bundlers)

```
intro/
├─ index.html                 # full-screen intro only
├─ css/
│  ├─ base.css                # Inter, dark theme, overlay UI
│  └─ intro.css
├─ js/
│  ├─ three.module.min.js
│  ├─ loaders/GLTFLoader.js
│  ├─ loaders/DRACOLoader.js
│  ├─ intro.js                # scene/loop/controls
│  ├─ particles.js            # smoke/fire/bullets systems
│  ├─ portal-shader.js        # GLSL for portal + white-flash quad
│  ├─ audio.js                # ambient + sfx (gesture-gated)
│  └─ utils.js                # loaders, device caps, perf toggles
└─ assets/
   ├─ models/                 # .glb files (character, trench, wounded)
   ├─ textures/               # smoke.png, fire.png, ground maps, star_sky.jpg
   ├─ sfx/                    # distant_fire.mp3, rumble.mp3, whoosh_portal.mp3
   └─ ui/logo-glow.png        # your neon arrow (for UI accent)
```

Works on any static host (Vercel/Netlify/GitHub/Cloudflare Pages). No framework.

## 1) Visual Direction & Camera

* **Third-person chase camera**, slightly above & behind; pitched downward 15–25°.
* Camera offset relative to character: `(x: 0, y: 3.2, z: -6.0)`; smooth follow (lerp 0.08–0.12).
* **FOV** 60 desktop / 70 mobile. Near=0.1 Far=200.
* Dark, gritty trench; **single neon accent** (portal) using your logo palette (neon green/cyan/purple + soft yellow glow).

## 2) Controls & On-screen UI

* Keyboard: **↑ / W** = move forward (press-and-hold).
* Mobile: on-screen **↑ button** (press-and-hold) bottom-center.
* **Progress bar** top-center reflecting distance along path.
* **Skip Intro** button top-right (Enter/Space activates when focused).
* **Mute** toggle bottom-left (audio starts only after first user gesture).
* Reduced-motion & no-WebGL → **auto-skip** (immediately fire `intro:complete`).

## 3) Path & Movement

* Build a **Catmull-Rom spline** down the trench centerline (procedural or JSON points).
* Character advances by parameter `t∈[0,1]`, speed `v = baseSpeed * delta * inputScalar`.
* Keep character Y on ground (simple flat ground or raycast every 2–3 frames).
* No lateral input; shallow noise in heading for life.

## 4) Scene Content (low-poly, GPU-friendly)

* **Trench**: modular segments (walls, floor, sandbags). ≤150k tris scene total.
* **Wounded soldiers**: 2–4 static GLBs along the path (environmental storytelling).
* **Particles**:

  * **Smoke:** billboard quads using `smoke.png` (size 1–2.4, alpha fade).
  * **Fire/embers:** additive quads `fire.png` + small clamped point lights.
  * **Bullets/tracers:** fast billboard streaks arcing overhead randomly.
  * **Explosions (distant):** sprite burst + brief screen shake (≤2px, ≤0.4s).
* **Lighting:** one cool directional + low ambient; small orange points by fires.
* **Tone mapping:** ACESFilmic, exposure 1.1–1.3. Optional tiny bloom (desktop only).

## 5) Portal & Finish

* **Portal mesh:** torus/ring; **custom shader** with radial swirl + fresnel, hue-shifting across the logo palette. Add inner **equirect starfield** (star\_sky.jpg) visible through the ring.
* Place an invisible **trigger sphere** at portal center. On enter:

  1. Play `whoosh_portal.mp3`.
  2. Brighten portal (500ms).
  3. **White flash:** animate full-screen quad opacity 0→1 (200–300ms), hold 200ms, then fade to black or leave white per `finishStyle`.
  4. **Stop loop**, dispose WebGL, **dispatch** `window.dispatchEvent(new Event('intro:complete'))` and call `window.onIntroComplete?.()`.

> Do **not** redirect or reveal any other page. The consumer will hook into the event later.

## 6) Performance & Fallbacks

* **Initial download ≤ 4.5 MB** gzipped. Prefer 1k textures; sprites 256–512px.
* Mobile caps: halve particle counts, disable bloom.
* **WebGL unsupported** or `prefers-reduced-motion: reduce` → skip immediately (still show a static hero image if you want) and fire the completion event.
* Cleanly **dispose** geometries, materials, textures, audio, and listeners on finish.

## 7) Accessibility

* All overlay UI tabbable, visible focus rings.
* Buttons have ARIA labels; tooltips optional.
* Provide **caption hint** near bottom: “Hold ↑ or tap ↑ to move forward.”
* Do not auto-play audio with volume; muted by default until interaction.

## 8) Implementation Plan

* Use **Three.js** module import in `<script type=\"module\">`.
* `intro.js` responsibilities:

  * `init()` → renderer, scene, camera, lights, overlay UI
  * `loadAssets()` → GLBs (DRACO), textures, audio (deferred)
  * `createTrench()`, `createCharacter()`, `createFX()`, `createPortal()`
  * `bindInputs()` (keyboard + touch)
  * `update(dt)` → movement along spline, camera follow, particles, mixer
  * `finishIntro()` → white flash, dispose, dispatch event/callback
* **Particles:** batched `Points` where possible or sprites in instanced meshes.
* **Character:** low-poly Mixamo rig; blend Idle→Run via `AnimationMixer`.

## 9) index.html (intro only) — required DOM

* Full-viewport **canvas container** `#intro-root` with `<canvas id=\"intro\">`.
* Overlay UI elements:

  * `#intro-progress` (progress bar)
  * `#intro-skip` (button)
  * `#intro-up` (touch control)
  * `#intro-mute` (toggle)
  * `#white-flash` (full-screen div for finish)
* Load Inter font; apply your **neon palette** (green/cyan/purple/yellow) to UI.

## 10) Code Stubs

**index.html (head snippets)**

```html
<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">
<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>
<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap\" rel=\"stylesheet\">
<link rel=\"stylesheet\" href=\"./css/base.css\">
<script type=\"module\" src=\"./js/intro.js\"></script>
```

**intro.js skeleton**

```js
import * as THREE from './three.module.min.js';
import { GLTFLoader } from './loaders/GLTFLoader.js';

let scene, camera, renderer, clock, mixer;
let character, portal, spline, t=0, moving=false;

export async function init(){
  renderer = new THREE.WebGLRenderer({ antialias:true, alpha:true, powerPreference:'high-performance' });
  renderer.setSize(innerWidth, innerHeight);
  renderer.toneMapping = THREE.ACESFilmicToneMapping;
  document.getElementById('intro-root').appendChild(renderer.domElement);

  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(60, innerWidth/innerHeight, 0.1, 200);
  clock = new THREE.Clock();

  // TODO lights, trench, character (mixer), FX, portal, spline
  await loadAssets();
  bindInputs();
  animate();
}

function animate(){
  const dt = clock.getDelta();
  // move forward if moving, advance t along spline
  // position character and camera, update particles and mixer
  renderer.render(scene, camera);
  requestAnimationFrame(animate);
}

function finishIntro(){
  // play whoosh, white flash DOM overlay
  // stop loop, dispose, then:
  window.dispatchEvent(new Event('intro:complete'));
  window.onIntroComplete?.();
}

// window.addEventListener('resize', …)
init();
```

**Portal shader (high level)**

* Vertex: pass uv, worldNormal.
* Fragment: fresnel = pow(1.0 - dot(normalize(vNormal), viewDir), 3.0);
* Radial noise swirl: rotate UVs by time, sample fbm noise, map to hue (logo palette); mix with starfield sample; additive blend near rim.

## 11) Assets (sources or AI gen)

**Ready sources**

* **Character**: Mixamo low-poly with Idle + Run (export FBX → GLB). Target <25k tris.
* **Trench**: Simple Blender model; bake AO to vertex colors or 1k texture; export `trench.glb`.
* **Wounded A/B**: Freeze Mixamo poses → GLB.
* **Sprites**: Kenney’s smoke/fire or custom PNGs (256–512px with alpha).
* **Starfield**: CC0 Poly Haven equirect JPG (2048×1024).
* **SFX**: freesound.org CC0; compress to 96–128 kbps.

**AI-generate (optional)**

* Seamless mud/wood albedo & normal; smoke/fire sprites; “galaxy swirl” background. Save under `assets/textures/`.

> Place files according to the tree above. Keep total gzipped payload ≤ 4.5 MB.

## 12) Performance Targets & QA

* Desktop: 55–60 FPS; mid mobile: 28–35 FPS.
* Memory stable; no console errors.
* `prefers-reduced-motion` → skip; still fire `intro:complete`.
* Particle caps adjustable via `utils.getDeviceTier()`.
* All controls keyboard + touch; overlay elements tabbable; visible focus rings.

---

### Hand-off hook for your later integration

When you’re ready to wire your landing page, listen for:

```js
window.addEventListener('intro:complete', () => {
  // your code here (e.g., show landing, navigate, start analytics)
});
```
